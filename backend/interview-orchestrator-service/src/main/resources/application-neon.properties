# =========================================
# NEON PROFILE - INTERVIEW ORCHESTRATOR SERVICE
# =========================================
# Migrated from Supabase to Neon PostgreSQL for unlimited connections

# SERVER
server.port=${PORT:8081}
server.address=0.0.0.0
server.servlet.context-path=/api/interview

# DISABLE SSL FOR RENDER DEPLOYMENT (Render handles SSL at platform level)
server.ssl.enabled=false

# NEON POSTGRESQL DATABASE - OPTIMIZED FOR SERVERLESS
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://ep-muddy-truth-ad583n4q-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&ApplicationName=ARIA-Interview-Orchestrator}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${DB_USERNAME:neondb_owner}
spring.datasource.password=${DB_PASSWORD:npg_SxyCtjKD16EU}

# PostgreSQL SSL Configuration for Neon
spring.datasource.hikari.data-source-properties.ssl=true
spring.datasource.hikari.data-source-properties.sslmode=require

# Connection Pool Settings for Neon - Optimized for serverless scaling
# Neon can handle many more connections than Supabase
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.connection-timeout=15000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=30000

# Database connection resilience
spring.datasource.hikari.initialization-fail-timeout=-1
spring.datasource.continue-on-error=true

# Enable prepared statements for better performance with Neon
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true
spring.datasource.hikari.data-source-properties.connectionAttributes=program_name:ARIA-Interview-Orchestrator

# JPA Configuration for PostgreSQL - NEON OPTIMIZED
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.hbm2ddl.auto=none
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# FLYWAY MIGRATIONS - COMPLETELY DISABLED (schema already exists)
spring.flyway.enabled=false
# Explicitly override any inherited Flyway configuration
spring.flyway.locations=
spring.flyway.baseline-on-migrate=false
spring.flyway.validate-on-migrate=false
spring.flyway.clean-disabled=true
spring.flyway.out-of-order=false
spring.flyway.mixed=false
spring.flyway.default-schema=
# Force disable Flyway connection attempts
spring.flyway.url=
spring.flyway.user=
spring.flyway.password=

# UPSTASH REDIS CONFIGURATION - UNCHANGED
spring.redis.host=${UPSTASH_REDIS_HOST:renewing-falcon-41265.upstash.io}
spring.redis.port=${UPSTASH_REDIS_PORT:6379}
spring.redis.password=${UPSTASH_REDIS_PASSWORD:AaExAAIncDE3NTczYWIxNDNjYjA0NzI2YWQ2NmY0ZTZjZTg5Y2IyMXAxNDEyNjU}
spring.redis.ssl.enabled=true
spring.redis.timeout=5000ms
spring.redis.database=0
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=2
spring.redis.lettuce.pool.max-wait=2000ms
spring.redis.lettuce.pool.time-between-eviction-runs=30000ms
spring.redis.connect-timeout=5000ms

# EXTERNAL SERVICES - PRODUCTION URLS
app.services.ai-analytics.url=${AI_ANALYTICS_URL:https://aria-analytics-service.onrender.com}
app.services.ai-analytics.timeout=30s
app.services.question-engine.url=${QUESTION_ENGINE_URL:https://aria-adaptive-engine.onrender.com}
app.services.question-engine.timeout=15s
app.services.transcript.url=${TRANSCRIPT_URL:https://aria-speech-service.onrender.com}
app.services.transcript.websocket.url=${TRANSCRIPT_WS_URL:wss://aria-speech-service.onrender.com}
app.services.user-management.url=${USER_MGMT_URL:https://aria-user-management-v2.onrender.com}

# AI/ML SERVICES - RAILWAY
app.services.mozilla-tts.url=${MOZILLA_TTS_URL:https://your-mozilla-tts-service.railway.app}
app.services.mozilla-tts.timeout=20s
app.services.ai-avatar.url=${AI_AVATAR_URL:https://your-ai-avatar-service.railway.app}
app.services.ai-avatar.timeout=15s
app.services.voice-synthesis.url=${VOICE_SYNTHESIS_URL:https://your-voice-synthesis-service.railway.app}
app.services.voice-synthesis.timeout=20s
app.services.voice-isolation.url=${VOICE_ISOLATION_URL:https://your-voice-isolation-service.railway.app}
app.services.voice-isolation.timeout=15s

# WEBRTC CONFIGURATION
app.webrtc.daily.api-key=${DAILY_API_KEY:128ca969d5ff50682c33d3b4e2f3d0f844bd035ecba65ed51371b0e190d56500}
app.webrtc.daily.domain=${DAILY_DOMAIN:ariaa.daily.co}
app.webrtc.session.timeout=7200

# INTERVIEW CONFIGURATION - IRT Parameters
app.interview.irt.initial-theta=0.0
app.interview.irt.initial-standard-error=1.0
app.interview.irt.confidence-threshold=0.3
app.interview.irt.min-questions=10
app.interview.irt.max-questions=30

# WEBSOCKET CONFIGURATION
app.websocket.allowed-origins=${CORS_ORIGINS:https://aria-frontend.onrender.com}
app.websocket.session-timeout=1800000
app.websocket.heartbeat-interval=30000

# JWT CONFIG
app.jwt.secret=${JWT_SECRET:kV7pL9zR3mX1tU5qW8bC2yJ6fH4nE0sDmA3gK9xZ2vF8uQ4tY7rP1wE6iO5sL0hN}
app.jwt.expiry-ms=${JWT_EXPIRY_MS:3600000}

# TIMEZONE CONFIGURATION
spring.jackson.time-zone=America/Los_Angeles
spring.jpa.properties.hibernate.jdbc.time_zone=America/Los_Angeles

# LOGGING - INFO LEVEL
logging.level.org.springframework=INFO
logging.level.com.company=INFO
logging.level.root=WARN
logging.level.org.flywaydb=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ACTUATOR - HEALTH CHECK CONFIGURATION
management.endpoints.web.exposure.include=health,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true
management.health.redis.enabled=false
management.health.defaults.enabled=true
management.endpoint.health.cache.time-to-live=10s

# CORS
app.cors.allowed-origins=${CORS_ORIGINS:https://aria-frontend.onrender.com}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true
"}}
</function_results>

### 4.3 Update Render Deployment Configuration

<function_calls>
<invoke name="edit_files">
<parameter name="title">Update render.yaml to use Neon PostgreSQL instead of Supabase
