# =========================================
# AWS PROFILE - USER MANAGEMENT SERVICE
# =========================================

# SERVER - AWS will set PORT via environment
server.port=${PORT:8080}
server.servlet.context-path=/api/auth

# AWS RDS POSTGRESQL DATABASE (fallback to Supabase)
spring.datasource.url=${AWS_RDS_URL:${DATABASE_URL:postgresql://postgres:CoolLife@AriaDB@db.deqfzxsmuydhrepyiagq.supabase.co:5432/postgres}}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${AWS_DB_USERNAME:${DB_USERNAME:postgres}}
spring.datasource.password=${AWS_DB_PASSWORD:${DB_PASSWORD:CoolLife@AriaDB}}

# Connection Pool Settings optimized for AWS
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# JPA Configuration for PostgreSQL
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# FLYWAY MIGRATIONS - ENABLED for AWS
spring.flyway.enabled=false

# AWS ELASTICACHE REDIS (fallback to Upstash)
spring.redis.host=${AWS_REDIS_HOST:renewing-falcon-41265.upstash.io}
spring.redis.port=${AWS_REDIS_PORT:6379}
spring.redis.password=${AWS_REDIS_PASSWORD:${UPSTASH_REDIS_REST_TOKEN:AaExAAIncDE3NTczYWIxNDNjYjA0NzI2YWQ2NmY0ZTZjZTg5Y2IyMXAxNDEyNjU}}
spring.redis.timeout=3000ms
spring.redis.database=0
spring.redis.lettuce.pool.max-active=16
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=4

# JWT CONFIG - SECURE FOR AWS
app.jwt.secret=${JWT_SECRET:kV7pL9zR3mX1tU5qW8bC2yJ6fH4nE0sDmA3gK9xZ2vF8uQ4tY7rP1wE6iO5sL0hN}
app.jwt.expiry-ms=${JWT_EXPIRY_MS:3600000}
app.jwt.refresh-expiry-ms=${JWT_REFRESH_EXPIRY_MS:604800000}
app.jwt.issuer=${JWT_ISSUER:ARIA-AWS-Production}

# AWS SES MAIL CONFIGURATION (fallback to Gmail)
spring.mail.host=${AWS_SES_HOST:${SMTP_HOST:smtp.gmail.com}}
spring.mail.port=${AWS_SES_PORT:${SMTP_PORT:587}}
spring.mail.username=${AWS_SES_USERNAME:${SMTP_USERNAME:workwithrvprajwal@gmail.com}}
spring.mail.password=${AWS_SES_PASSWORD:${SMTP_PASSWORD:vclhowpwtmopdqdz}}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.default-encoding=UTF-8

# MULTIPART FILE UPLOAD - AWS LIMITS
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:20MB}
spring.servlet.multipart.enabled=true

# AWS S3 CONFIGURATION
aws.s3.bucket-name=${AWS_S3_BUCKET:aria-user-uploads}
aws.s3.region=${AWS_REGION:us-east-1}
aws.access.key=${AWS_ACCESS_KEY_ID}
aws.secret.key=${AWS_SECRET_ACCESS_KEY}

# LOGGING - OPTIMIZED FOR AWS CLOUDWATCH
logging.level.org.springframework=INFO
logging.level.com.company=INFO
logging.level.root=WARN
logging.level.org.flywaydb=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{traceId},%X{spanId}] [%thread] %-5level %logger{36} - %msg%n

# AWS CLOUDWATCH LOGS
logging.config=${LOGGING_CONFIG:classpath:logback-aws.xml}

# SECURITY HEADERS - PRODUCTION
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict
server.servlet.session.timeout=30m

# ACTUATOR - AWS PRODUCTION
management.endpoints.web.exposure.include=health,metrics,prometheus,info
management.endpoint.health.show-details=when-authorized
management.metrics.export.prometheus.enabled=true
management.metrics.export.cloudwatch.enabled=${AWS_CLOUDWATCH_METRICS_ENABLED:true}
management.metrics.export.cloudwatch.namespace=ARIA/UserManagement
management.security.enabled=true

# AWS SECRETS MANAGER INTEGRATION
aws.secretsmanager.enabled=${AWS_SECRETS_MANAGER_ENABLED:false}

# CORS - PRODUCTION DOMAINS
app.cors.allowed-origins=${CORS_ORIGINS:https://aria.com,https://www.aria.com,https://aria-frontend.onrender.com}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
app.cors.allow-credentials=true

# SSL/TLS - AWS ALB TERMINATION
server.forward-headers-strategy=framework
server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto

# AWS ENVIRONMENT DETECTION
cloud.aws.region.auto=${AWS_REGION:us-east-1}
cloud.aws.credentials.instance-profile=${AWS_USE_INSTANCE_PROFILE:true}
