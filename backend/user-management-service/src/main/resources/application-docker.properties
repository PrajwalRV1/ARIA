# =========================================
# DOCKER ENVIRONMENT CONFIGURATION
# =========================================
# This profile is used when running in Docker containers

# =========================================
# SERVER
# =========================================
server.port=8080

# =========================================
# MYSQL DATABASE - Docker Container
# =========================================
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:mysql}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:user_management_db}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=${MYSQL_USER:user_mgmt}
spring.datasource.password=${MYSQL_PASSWORD:StrongPassword123}

# Connection pool settings for production
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.connection-timeout=60000

# JPA
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}

# =========================================
# FLYWAY MIGRATIONS
# =========================================
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true

# =========================================
# REDIS SESSION MANAGEMENT
# =========================================
spring.redis.host=${REDIS_HOST:redis}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.timeout=2000ms
spring.redis.database=0
# Connection pool settings
spring.redis.jedis.pool.max-active=20
spring.redis.jedis.pool.max-idle=10
spring.redis.jedis.pool.min-idle=2
spring.redis.jedis.pool.max-wait=-1ms

# =========================================
# JWT CONFIG
# =========================================
app.jwt.secret=${JWT_SECRET:kV7pL9zR3mX1tU5qW8bC2yJ6fH4nE0sD}
# Access token expiry (1 hour)
app.jwt.expiry-ms=${JWT_EXPIRY_MS:3600000}
# Refresh token expiry (7 days)
app.jwt.refresh-expiry-ms=${JWT_REFRESH_EXPIRY_MS:604800000}

# =========================================
# MAIL CONFIGURATION
# =========================================
spring.mail.host=${SMTP_HOST:smtp.gmail.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USER:workwithrvprajwal@gmail.com}
spring.mail.password=${SMTP_PASSWORD:vclhowpwtmopdqdz}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.default-encoding=UTF-8

# =========================================
# MULTIPART FILE UPLOAD
# =========================================
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:10MB}
spring.servlet.multipart.enabled=true

# =========================================
# EXTERNAL SERVICES
# =========================================
app.services.interview-orchestrator.url=${INTERVIEW_ORCHESTRATOR_URL:http://interview-orchestrator-service:8081}
app.services.adaptive-engine.url=${ADAPTIVE_ENGINE_URL:http://adaptive-engine:8001}
app.services.speech-service.url=${SPEECH_SERVICE_URL:http://speech-service:8002}
app.services.ai-analytics.url=${AI_ANALYTICS_URL:http://ai-analytics:8003}

# =========================================
# CORS CONFIGURATION
# =========================================
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:4200,http://frontend:4200}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true

# =========================================
# LOGGING
# =========================================
logging.level.org.springframework=${SPRING_LOG_LEVEL:INFO}
logging.level.com.company=${APP_LOG_LEVEL:DEBUG}
logging.level.org.flywaydb=${FLYWAY_LOG_LEVEL:INFO}
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Log to file in Docker container
logging.file.name=/app/logs/user-management-service.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.total-size-cap=100MB

# =========================================
# ACTUATOR (Health Checks & Monitoring)
# =========================================
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true
management.endpoint.prometheus.enabled=true

# Health check details
management.health.redis.enabled=true
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.mail.enabled=false

# =========================================
# SECURITY HEADERS
# =========================================
server.servlet.session.cookie.secure=${COOKIE_SECURE:false}
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax

# =========================================
# PERFORMANCE TUNING
# =========================================
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.connection-timeout=20000
server.tomcat.keep-alive-timeout=15000

# =========================================
# ERROR HANDLING
# =========================================
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param
server.error.include-exception=false
