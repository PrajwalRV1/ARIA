# =========================================
# RENDER PROFILE - PRODUCTION DEPLOYMENT
# =========================================

# SERVER CONFIGURATION - Render Port Binding
server.port=${PORT:8080}
server.address=0.0.0.0
server.servlet.context-path=/api/auth

# DISABLE SSL (Render handles SSL termination)
server.ssl.enabled=false

# SUPABASE POSTGRESQL DATABASE CONFIGURATION
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://aws-1-ap-south-1.pooler.supabase.com:6543/postgres?sslmode=require&cachePrepStmts=false&useServerPrepStmts=false&rewriteBatchedStatements=false&prepareThreshold=0&preparedStatementCacheSize=0&preparedStatementCacheSqlLimit=0&ApplicationName=ARIA-User-Management}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${DB_USERNAME:postgres.deqfzxsmuydhrepyiagq}
spring.datasource.password=${DB_PASSWORD:CoolLife@AriaDB}

# CONNECTION POOL OPTIMIZATION FOR RENDER FREE TIER
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.leak-detection-threshold=60000

# JPA CONFIGURATION FOR POSTGRESQL
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# FLYWAY DATABASE MIGRATIONS - DISABLED FOR INITIAL DEPLOYMENT
spring.flyway.enabled=false
spring.flyway.locations=classpath:db/migration/postgresql
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true

# REDIS CONFIGURATION - DISABLED TO AVOID ISSUES
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration

# JWT CONFIG
app.jwt.secret=${JWT_SECRET:kV7pL9zR3mX1tU5qW8bC2yJ6fH4nE0sDmA3gK9xZ2vF8uQ4tY7rP1wE6iO5sL0hN}
app.jwt.expiry-ms=${JWT_EXPIRY_MS:3600000}
app.jwt.refresh-expiry-ms=${JWT_REFRESH_EXPIRY_MS:604800000}
app.jwt.issuer=${JWT_ISSUER:ARIA-Render}

# MAIL CONFIGURATION
spring.mail.host=${SMTP_HOST:smtp.gmail.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USERNAME:workwithrvprajwal@gmail.com}
spring.mail.password=${SMTP_PASSWORD:vclhowpwtmopdqdz}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.default-encoding=UTF-8

# MULTIPART FILE UPLOAD - Render optimized
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.enabled=true

# LOGGING - Optimized for Render with debug info for port binding
logging.level.org.springframework=INFO
logging.level.com.company=INFO
logging.level.root=WARN
logging.level.org.flywaydb=INFO
# Enable debug logging for Tomcat and server startup
logging.level.org.apache.catalina.core=INFO
logging.level.org.springframework.boot.web.embedded.tomcat=INFO
logging.level.org.springframework.boot.web.servlet.context=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# SECURITY HEADERS - Render production
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict

# ACTUATOR - Render compatible
management.endpoints.web.exposure.include=health,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.metrics.export.prometheus.enabled=true
management.security.enabled=true
# Make Redis health check non-blocking to prevent health check failures
management.health.redis.enabled=false
management.health.defaults.enabled=true

# CORS - Render domains
app.cors.allowed-origins=${CORS_ORIGINS:https://aria-frontend.onrender.com,https://aria-user-management.onrender.com}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin
app.cors.allow-credentials=true

# Render-specific optimizations
server.forward-headers-strategy=framework
server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto

# Environment detection
environment=${RENDER_SERVICE_NAME:render}

# Health check endpoint for Render
management.endpoint.health.probes.enabled=true
management.health.readinessstate.enabled=true
management.health.livenessstate.enabled=true
