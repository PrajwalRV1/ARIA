version: '3.8'

services:
  # Database Services
  mysql:
    image: mysql:8.0
    container_name: aria-mysql
    environment:
      MYSQL_ROOT_PASSWORD: aria_root_password
      MYSQL_DATABASE: aria_db
      MYSQL_USER: aria_user
      MYSQL_PASSWORD: aria_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - aria-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: aria-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aria-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5

  # User Management Service (Spring Boot)
  user-management-service:
    build:
      context: ./backend/user-management-service
      dockerfile: Dockerfile
    container_name: aria-user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/aria_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: aria_user
      SPRING_DATASOURCE_PASSWORD: aria_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aria-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Interview Orchestrator Service (Spring Boot)
  interview-orchestrator-service:
    build:
      context: ./backend/interview-orchestrator-service
      dockerfile: Dockerfile
    container_name: aria-interview-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/aria_db?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: aria_user
      SPRING_DATASOURCE_PASSWORD: aria_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SERVER_PORT: 8081
      ADAPTIVE_ENGINE_URL: http://adaptive-engine:8001
      SPEECH_SERVICE_URL: http://speech-service:8002
      AI_ANALYTICS_URL: http://ai-analytics:8003
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      adaptive-engine:
        condition: service_healthy
    networks:
      - aria-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Adaptive Question Engine (FastAPI/Python)
  adaptive-engine:
    build:
      context: ./adaptive-engine
      dockerfile: Dockerfile
    container_name: aria-adaptive-engine
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DATABASE_URL: mysql://aria_user:aria_password@mysql:3306/aria_db
      LOG_LEVEL: INFO
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - aria-network
    volumes:
      - ./adaptive-engine/models:/app/models  # For IRT models and question data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Speech & Transcript Service (FastAPI/Python)
  speech-service:
    build:
      context: ./speech-service
      dockerfile: Dockerfile
    container_name: aria-speech-service
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/google-cloud-key.json
      VOSK_MODEL_PATH: /app/models/vosk-model-en-us-0.22
      LOG_LEVEL: INFO
    ports:
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - aria-network
    volumes:
      - ./speech-service/models:/app/models  # Vosk speech models
      - ./speech-service/credentials:/app/credentials  # Google Cloud credentials
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AI Learning & Analytics Service (FastAPI/Python)
  ai-analytics:
    build:
      context: ./ai-analytics
      dockerfile: Dockerfile
    container_name: aria-ai-analytics
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 2
      DATABASE_URL: mysql://aria_user:aria_password@mysql:3306/aria_db
      HUGGINGFACE_CACHE_DIR: /app/models/huggingface
      LOG_LEVEL: INFO
    ports:
      - "8003:8003"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - aria-network
    volumes:
      - ./ai-analytics/models:/app/models  # ML models for video/audio analysis
      - ai_models:/app/models/huggingface  # HuggingFace models cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]  # GPU support for AI processing
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (Angular with SSR)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: aria-frontend
    environment:
      NODE_ENV: production
      API_BASE_URL: http://localhost:8080
      INTERVIEW_SERVICE_URL: http://localhost:8081
      SPEECH_SERVICE_URL: http://localhost:8002
      ANALYTICS_SERVICE_URL: http://localhost:8003
    ports:
      - "4200:4200"
    depends_on:
      - user-management-service
      - interview-orchestrator-service
    networks:
      - aria-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TURN Server for WebRTC (CoTURN)
  coturn:
    image: coturn/coturn:latest
    container_name: aria-turn-server
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "65435-65535:65435-65535/udp"  # TURN relay ports
    environment:
      TURN_USERNAME: aria_turn_user
      TURN_PASSWORD: aria_turn_password
      TURN_REALM: aria.local
      TURN_EXTERNAL_IP: ${EXTERNAL_IP:-127.0.0.1}
    volumes:
      - ./infrastructure/coturn/turnserver.conf:/etc/turnserver.conf
    networks:
      - aria-network
    restart: unless-stopped

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aria-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl  # SSL certificates
    depends_on:
      - frontend
      - user-management-service
      - interview-orchestrator-service
      - adaptive-engine
      - speech-service
      - ai-analytics
    networks:
      - aria-network
    restart: unless-stopped

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: aria-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aria-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: aria-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: aria_grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - aria-network
    depends_on:
      - prometheus

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: aria-loki
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    networks:
      - aria-network
    command: -config.file=/etc/loki/local-config.yaml

  # Development Tools (optional)
  adminer:
    image: adminer:latest
    container_name: aria-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    networks:
      - aria-network
    profiles:
      - development

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aria-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - aria-network
    profiles:
      - development

# Networks
networks:
  aria-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  ai_models:
    driver: local  # Shared AI models storage
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# Environment-specific overrides
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
